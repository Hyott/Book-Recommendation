services:
  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    restart: always

  backend:
    build: 
      context: ./app
      dockerfile: Dockerfile
    container_name: fastapi_backend
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    depends_on:
      - db
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${HOST}:${POSTGRES_PORT}/${DATABASE_NAME} # 환경 변수 사용
    env_file:
      - .env # .env 파일 로드

  frontend:
    build:
      context: ./flutter_app
      dockerfile: Dockerfile
    container_name: flutter_frontend
    ports:
      - "${FRONTEND_PORT}:${HTTP_PORT}"
    depends_on:
      - backend
    environment:
      API_BASE_URL: http://backend:${FRONTEND_PORT}  # FastAPI의 API 주소를 환경 변수로 지정
    env_file:
      - .env

  db:
    image: postgres:17
    container_name: postgres_db
    restart: always
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}" # 환경 변수 사용
    env_file:
      - .env # .env 파일 로드
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./app/database/init_database.sql:/docker-entrypoint-initdb.d/init_database.sql
volumes:
  postgres_data:
  
# services:
#   nginx:
#     image: nginx:latest
#     container_name: nginx_proxy
#     depends_on:
#       - backend
#       - frontend
#     ports:
#       - "80:80"
#       - "443:443"
#     environment:
#       BACKEND_PORT: "${BACKEND_PORT}"  # 환경 변수 전달
#     volumes:
#       # - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
#       - ./certbot/www:/var/www/certbot
#       - ./certbot/conf:/etc/letsencrypt
#       - "C:/Users/yh02s/Book-Recommendation/flutter_app/build/web:/usr/share/nginx/html"  # Windows 절대 경로 사용
#     restart: always

#   certbot:
#     image: certbot/certbot
#     container_name: certbot
#     volumes:
#       - ./certbot/www:/var/www/certbot
#       - ./certbot/conf:/etc/letsencrypt
#     entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot; sleep 12h & wait $${!}; done'"

#   backend:
#     build: 
#       context: ./app
#       dockerfile: Dockerfile
#     container_name: fastapi_backend
#     ports:
#       - "${BACKEND_PORT}:${BACKEND_PORT}"
#     depends_on:
#       - db
#     environment:
#       DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${HOST}:${POSTGRES_PORT}/${DATABASE_NAME} # 환경 변수 사용
#     env_file:
#       - .env # .env 파일 로드

#   frontend:
#     build:
#       context: ./flutter_app
#       dockerfile: Dockerfile
#     container_name: flutter_frontend
#     ports:
#       - "${FRONTEND_PORT}:${HTTP_PORT}"
#     depends_on:
#       - backend
#     environment:
#       API_BASE_URL: http://backend:${FRONTEND_PORT}  # FastAPI의 API 주소를 환경 변수로 지정
#     env_file:
#       - .env

#   db:
#     image: postgres:17
#     container_name: postgres_db
#     restart: always
#     ports:
#       - "${POSTGRES_PORT}:${POSTGRES_PORT}" # 환경 변수 사용
#     env_file:
#       - .env # .env 파일 로드
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#       - ./app/database/init_database.sql:/docker-entrypoint-initdb.d/init_database.sql
# volumes:
#   postgres_data:
