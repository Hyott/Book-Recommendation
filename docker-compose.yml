networks:
  app_networks:

services:
  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    depends_on:
      - backend
      - frontend
    networks:
      - app_networks
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - .env # .env 파일 로드
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
      - ./build_output:/usr/share/nginx/html:ro
    restart: always

  certbot:
    image: certbot/certbot
    container_name: certbot
    networks:
      - app_networks
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot; sleep 12h & wait $${!}; done'"

  backend:
    build: 
      context: ./app
      dockerfile: Dockerfile
    container_name: fastapi_backend
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    depends_on:
      - db
    networks:
      - app_networks
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${HOST}:${POSTGRES_PORT}/${DATABASE_NAME} # 환경 변수 사용
    env_file:
      - .env # .env 파일 로드

  frontend:
    build:
      context: ./flutter_app
      dockerfile: Dockerfile
      args:
        - API_BASE_URL=${BACKEND_URL}  # API 주소를 Dockerfile에서 ARG로 전달
    container_name: flutter_frontend
    ports:
      - "${FRONTEND_PORT}:${HTTP_PORT}"
    depends_on:
      - backend
    networks:
      - app_networks
    environment:
      API_BASE_URL: ${BACKEND_URL}  # API 주소 설정
    env_file:
      - .env
    volumes:
      - ./build_output:/app/build/web  # Flutter 빌드 결과를 호스트 ./build_output에 저장

  db:
    image: postgres:17
    container_name: postgres_db
    restart: always
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}" # 환경 변수 사용
    networks:
      - app_networks
    env_file:
      - .env # .env 파일 로드
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./app/database/init_database.sql:/docker-entrypoint-initdb.d/init_database.sql
volumes:
  postgres_data: